/*
Copyright 2022 The Koordinator Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/runtimeproxy/client/hookclient.go

// Package mock_hookclient is a generated GoMock package.
package mock_hookclient

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	client "github.com/koordinator-sh/koordinator/pkg/runtimeproxy/client"
)

// MockHookServerClientManagerInterface is a mock of HookServerClientManagerInterface interface.
type MockHookServerClientManagerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockHookServerClientManagerInterfaceMockRecorder
}

// MockHookServerClientManagerInterfaceMockRecorder is the mock recorder for MockHookServerClientManagerInterface.
type MockHookServerClientManagerInterfaceMockRecorder struct {
	mock *MockHookServerClientManagerInterface
}

// NewMockHookServerClientManagerInterface creates a new mock instance.
func NewMockHookServerClientManagerInterface(ctrl *gomock.Controller) *MockHookServerClientManagerInterface {
	mock := &MockHookServerClientManagerInterface{ctrl: ctrl}
	mock.recorder = &MockHookServerClientManagerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHookServerClientManagerInterface) EXPECT() *MockHookServerClientManagerInterfaceMockRecorder {
	return m.recorder
}

// RuntimeHookServerClient mocks base method.
func (m *MockHookServerClientManagerInterface) RuntimeHookServerClient(serverPath client.HookServerPath) (*client.RuntimeHookClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RuntimeHookServerClient", serverPath)
	ret0, _ := ret[0].(*client.RuntimeHookClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RuntimeHookServerClient indicates an expected call of RuntimeHookServerClient.
func (mr *MockHookServerClientManagerInterfaceMockRecorder) RuntimeHookServerClient(serverPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RuntimeHookServerClient", reflect.TypeOf((*MockHookServerClientManagerInterface)(nil).RuntimeHookServerClient), serverPath)
}
