/*
Copyright 2021 Alibaba Cloud.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "gitlab.alibaba-inc.com/cos/unified-resource-api/apis/resources/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CgroupsLister helps list Cgroupses.
type CgroupsLister interface {
	// List lists all Cgroupses in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Cgroups, err error)
	// Cgroupses returns an object that can list and get Cgroupses.
	Cgroupses(namespace string) CgroupsNamespaceLister
	CgroupsListerExpansion
}

// cgroupsLister implements the CgroupsLister interface.
type cgroupsLister struct {
	indexer cache.Indexer
}

// NewCgroupsLister returns a new CgroupsLister.
func NewCgroupsLister(indexer cache.Indexer) CgroupsLister {
	return &cgroupsLister{indexer: indexer}
}

// List lists all Cgroupses in the indexer.
func (s *cgroupsLister) List(selector labels.Selector) (ret []*v1alpha1.Cgroups, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Cgroups))
	})
	return ret, err
}

// Cgroupses returns an object that can list and get Cgroupses.
func (s *cgroupsLister) Cgroupses(namespace string) CgroupsNamespaceLister {
	return cgroupsNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CgroupsNamespaceLister helps list and get Cgroupses.
type CgroupsNamespaceLister interface {
	// List lists all Cgroupses in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Cgroups, err error)
	// Get retrieves the Cgroups from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Cgroups, error)
	CgroupsNamespaceListerExpansion
}

// cgroupsNamespaceLister implements the CgroupsNamespaceLister
// interface.
type cgroupsNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Cgroupses in the indexer for a given namespace.
func (s cgroupsNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Cgroups, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Cgroups))
	})
	return ret, err
}

// Get retrieves the Cgroups from the indexer for a given namespace and name.
func (s cgroupsNamespaceLister) Get(name string) (*v1alpha1.Cgroups, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("cgroups"), name)
	}
	return obj.(*v1alpha1.Cgroups), nil
}
