/*
Copyright 2021 Alibaba Cloud.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "gitlab.alibaba-inc.com/cos/unified-resource-api/apis/autoscaling/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RecommendationCheckpointLister helps list RecommendationCheckpoints.
type RecommendationCheckpointLister interface {
	// List lists all RecommendationCheckpoints in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.RecommendationCheckpoint, err error)
	// RecommendationCheckpoints returns an object that can list and get RecommendationCheckpoints.
	RecommendationCheckpoints(namespace string) RecommendationCheckpointNamespaceLister
	RecommendationCheckpointListerExpansion
}

// recommendationCheckpointLister implements the RecommendationCheckpointLister interface.
type recommendationCheckpointLister struct {
	indexer cache.Indexer
}

// NewRecommendationCheckpointLister returns a new RecommendationCheckpointLister.
func NewRecommendationCheckpointLister(indexer cache.Indexer) RecommendationCheckpointLister {
	return &recommendationCheckpointLister{indexer: indexer}
}

// List lists all RecommendationCheckpoints in the indexer.
func (s *recommendationCheckpointLister) List(selector labels.Selector) (ret []*v1alpha1.RecommendationCheckpoint, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RecommendationCheckpoint))
	})
	return ret, err
}

// RecommendationCheckpoints returns an object that can list and get RecommendationCheckpoints.
func (s *recommendationCheckpointLister) RecommendationCheckpoints(namespace string) RecommendationCheckpointNamespaceLister {
	return recommendationCheckpointNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RecommendationCheckpointNamespaceLister helps list and get RecommendationCheckpoints.
type RecommendationCheckpointNamespaceLister interface {
	// List lists all RecommendationCheckpoints in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.RecommendationCheckpoint, err error)
	// Get retrieves the RecommendationCheckpoint from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.RecommendationCheckpoint, error)
	RecommendationCheckpointNamespaceListerExpansion
}

// recommendationCheckpointNamespaceLister implements the RecommendationCheckpointNamespaceLister
// interface.
type recommendationCheckpointNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RecommendationCheckpoints in the indexer for a given namespace.
func (s recommendationCheckpointNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RecommendationCheckpoint, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RecommendationCheckpoint))
	})
	return ret, err
}

// Get retrieves the RecommendationCheckpoint from the indexer for a given namespace and name.
func (s recommendationCheckpointNamespaceLister) Get(name string) (*v1alpha1.RecommendationCheckpoint, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("recommendationcheckpoint"), name)
	}
	return obj.(*v1alpha1.RecommendationCheckpoint), nil
}
