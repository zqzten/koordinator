/*
Copyright 2021 Alibaba Cloud.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "gitlab.alibaba-inc.com/cos/unified-resource-api/apis/scheduling/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ReserveResourceLister helps list ReserveResources.
type ReserveResourceLister interface {
	// List lists all ReserveResources in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.ReserveResource, err error)
	// ReserveResources returns an object that can list and get ReserveResources.
	ReserveResources(namespace string) ReserveResourceNamespaceLister
	ReserveResourceListerExpansion
}

// reserveResourceLister implements the ReserveResourceLister interface.
type reserveResourceLister struct {
	indexer cache.Indexer
}

// NewReserveResourceLister returns a new ReserveResourceLister.
func NewReserveResourceLister(indexer cache.Indexer) ReserveResourceLister {
	return &reserveResourceLister{indexer: indexer}
}

// List lists all ReserveResources in the indexer.
func (s *reserveResourceLister) List(selector labels.Selector) (ret []*v1beta1.ReserveResource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.ReserveResource))
	})
	return ret, err
}

// ReserveResources returns an object that can list and get ReserveResources.
func (s *reserveResourceLister) ReserveResources(namespace string) ReserveResourceNamespaceLister {
	return reserveResourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ReserveResourceNamespaceLister helps list and get ReserveResources.
type ReserveResourceNamespaceLister interface {
	// List lists all ReserveResources in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta1.ReserveResource, err error)
	// Get retrieves the ReserveResource from the indexer for a given namespace and name.
	Get(name string) (*v1beta1.ReserveResource, error)
	ReserveResourceNamespaceListerExpansion
}

// reserveResourceNamespaceLister implements the ReserveResourceNamespaceLister
// interface.
type reserveResourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ReserveResources in the indexer for a given namespace.
func (s reserveResourceNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.ReserveResource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.ReserveResource))
	})
	return ret, err
}

// Get retrieves the ReserveResource from the indexer for a given namespace and name.
func (s reserveResourceNamespaceLister) Get(name string) (*v1beta1.ReserveResource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("reserveresource"), name)
	}
	return obj.(*v1beta1.ReserveResource), nil
}
