/*
Copyright 2021 The Hybridnet Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/alibaba/hybridnet/pkg/apis/networking/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IPInstanceLister helps list IPInstances.
// All objects returned here must be treated as read-only.
type IPInstanceLister interface {
	// List lists all IPInstances in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.IPInstance, err error)
	// IPInstances returns an object that can list and get IPInstances.
	IPInstances(namespace string) IPInstanceNamespaceLister
	IPInstanceListerExpansion
}

// iPInstanceLister implements the IPInstanceLister interface.
type iPInstanceLister struct {
	indexer cache.Indexer
}

// NewIPInstanceLister returns a new IPInstanceLister.
func NewIPInstanceLister(indexer cache.Indexer) IPInstanceLister {
	return &iPInstanceLister{indexer: indexer}
}

// List lists all IPInstances in the indexer.
func (s *iPInstanceLister) List(selector labels.Selector) (ret []*v1.IPInstance, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.IPInstance))
	})
	return ret, err
}

// IPInstances returns an object that can list and get IPInstances.
func (s *iPInstanceLister) IPInstances(namespace string) IPInstanceNamespaceLister {
	return iPInstanceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IPInstanceNamespaceLister helps list and get IPInstances.
// All objects returned here must be treated as read-only.
type IPInstanceNamespaceLister interface {
	// List lists all IPInstances in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.IPInstance, err error)
	// Get retrieves the IPInstance from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.IPInstance, error)
	IPInstanceNamespaceListerExpansion
}

// iPInstanceNamespaceLister implements the IPInstanceNamespaceLister
// interface.
type iPInstanceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IPInstances in the indexer for a given namespace.
func (s iPInstanceNamespaceLister) List(selector labels.Selector) (ret []*v1.IPInstance, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.IPInstance))
	})
	return ret, err
}

// Get retrieves the IPInstance from the indexer for a given namespace and name.
func (s iPInstanceNamespaceLister) Get(name string) (*v1.IPInstance, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("ipinstance"), name)
	}
	return obj.(*v1.IPInstance), nil
}
