// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: api.proto

package cachepod

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CachedPodAllocatorClient is the client API for CachedPodAllocator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CachedPodAllocatorClient interface {
	AllocateCachedPods(ctx context.Context, in *AllocateCachedPodsRequest, opts ...grpc.CallOption) (*AllocateCachedPodsResponse, error)
}

type cachedPodAllocatorClient struct {
	cc grpc.ClientConnInterface
}

func NewCachedPodAllocatorClient(cc grpc.ClientConnInterface) CachedPodAllocatorClient {
	return &cachedPodAllocatorClient{cc}
}

func (c *cachedPodAllocatorClient) AllocateCachedPods(ctx context.Context, in *AllocateCachedPodsRequest, opts ...grpc.CallOption) (*AllocateCachedPodsResponse, error) {
	out := new(AllocateCachedPodsResponse)
	err := c.cc.Invoke(ctx, "/cachepod.scheduler.CachedPodAllocator/AllocateCachedPods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CachedPodAllocatorServer is the server API for CachedPodAllocator service.
// All implementations should embed UnimplementedCachedPodAllocatorServer
// for forward compatibility
type CachedPodAllocatorServer interface {
	AllocateCachedPods(context.Context, *AllocateCachedPodsRequest) (*AllocateCachedPodsResponse, error)
}

// UnimplementedCachedPodAllocatorServer should be embedded to have forward compatible implementations.
type UnimplementedCachedPodAllocatorServer struct {
}

func (UnimplementedCachedPodAllocatorServer) AllocateCachedPods(context.Context, *AllocateCachedPodsRequest) (*AllocateCachedPodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocateCachedPods not implemented")
}

// UnsafeCachedPodAllocatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CachedPodAllocatorServer will
// result in compilation errors.
type UnsafeCachedPodAllocatorServer interface {
	mustEmbedUnimplementedCachedPodAllocatorServer()
}

func RegisterCachedPodAllocatorServer(s grpc.ServiceRegistrar, srv CachedPodAllocatorServer) {
	s.RegisterService(&CachedPodAllocator_ServiceDesc, srv)
}

func _CachedPodAllocator_AllocateCachedPods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocateCachedPodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CachedPodAllocatorServer).AllocateCachedPods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cachepod.scheduler.CachedPodAllocator/AllocateCachedPods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CachedPodAllocatorServer).AllocateCachedPods(ctx, req.(*AllocateCachedPodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CachedPodAllocator_ServiceDesc is the grpc.ServiceDesc for CachedPodAllocator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CachedPodAllocator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cachepod.scheduler.CachedPodAllocator",
	HandlerType: (*CachedPodAllocatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllocateCachedPods",
			Handler:    _CachedPodAllocator_AllocateCachedPods_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
